//Steven Stapleton
//This  will read a text file and record the maze, it will then use recursion to solve the maze and output the solution

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class stub
{
	//record an index for a maze
	static int rows = 0;
	static int collom = 0;
	static int currentX = 0;
	static int currentY = 0;
	static char[][] maze;
	//Use this to record last known position

    //Used to record start end last know postion and if it is a good path or not
	static boolean[][] wasHere1;
	static boolean[][] correctPath1;
	static int startX;
	static int startY;
	static int endX;
	static int endY;
	// Legend for what symbols meen convert to character so we can compare them when finding start and end cordinates
	static String wall = "#";
	static char wall1 = wall.charAt(0);
	
	static String open = ".";
	char open1 = open.charAt(0);
	
	static String goal = "G";
	static char goal1 = goal.charAt(0);
	

	 static int testCounter=0;

	public static void main(String[] args) {
		// instanciate the scanner
		Scanner scannerFile = null;
		Scanner scannerFile2 = null;

		// Get the text file and catch error if their is one
		try {
			// read the maze file for the input
			Scanner input = new Scanner(new File("maze1.txt"));
			Scanner input2 = new Scanner(new File("maze1.txt"));

			scannerFile = input;
			scannerFile2 = input2;
		} catch (FileNotFoundException e)
		{
			// catch error and tell user what happend
			System.out.println("ERROR");
			e.printStackTrace();
		}
		// count the index of the maze
		String character;
        System.out.println("Maze Started with");
		while (scannerFile.hasNext())
		{
			//find the index of array
			character = scannerFile.next();
			collom++;
			rows = character.length();

		}
		
		// Create array and add the number of rows, colloms
		char[][] maze1 = new char[rows][collom];
		
		// now read the text file and add the values to the array with the index
		while (scannerFile2.hasNext())
		{
			// do for each index of the array, assign values to array indexes
			for (int increment = 0; increment < rows; increment++) {
				increment++;
				for (int increment2 = 0; increment2 < collom; increment2++) {
					// while the scanner has a next line

					// break down the line to characters
					// get the next line
					if (scannerFile2.hasNext())
					{
						String temr = scannerFile2.next();
						StringBuilder sb = new StringBuilder(temr);
                        //Now sentence is broken down assign each index to each character of the line
						for (int incr = 0; incr < sb.length(); incr++)
						{
                            //Check if current character is the start or finish and also add to array
							char temp = sb.charAt(incr);
							character = Character.toString(temp);

							String line = "S";
							char ans = line.charAt(0);
							// Record end point
							if (character.charAt(0) == goal1)
							{
								endX = incr;
								endY = increment;

							}
							//record end point
							if (ans == temp)
							{
								startY = increment2;
								startX = incr;
							}
							//Actually assign character to local maze
							maze1[incr][increment2] = character.charAt(0);
   
					       //Print out character
							System.out.print(maze1[incr][increment2]);
							//Pass local maze to global mazes
							maze = maze1;
							testCounter++;
							//When done a line print out a new line
							if (testCounter == rows)
							{
								System.out.println("");
								testCounter = 0;
							}
						}
					}
				}
			}		
		}

		//Declare so we can see if you were here and if this is a legitment path
		boolean[][] wasHere = new boolean[rows][collom];
		boolean[][] correctPath = new boolean[rows][collom];
		//Pass indexes to global arrays
		wasHere1 = wasHere;
		correctPath1 = correctPath;
		//initiate

           //Declare all index as false or not traveled yet
		   for (int row = 0; row < maze.length; row++)
		        // Sets boolean Arrays to default values
		        for (int col = 0; col < maze[row].length; col++)
		        {
		            wasHere[row][col] = false;
		            correctPath[row][col] = false;
		        }
            //Call recursive solve with start values
		    boolean solve = recursiveSolve(startX, startY);
		 
		    // Will leave you with a boolean array (correctPath)
		    // with the path indicated by true values.
		    // If b is false, there is no solution to the maze

		// Display solved maze
		    
		    if (solve == false)
		    {
		    	//if return false their is no solution
		     System.out.println("No solution -");
		     System.exit(0);
		    }
		    
		    //This will print out maze 
			 int counter = 0;
			 for (int colCounter = 0; colCounter < collom; colCounter++)
				
				{
				 for (int rowCounter = 0; rowCounter < rows; rowCounter++)
					{
						//Print out maze
						System.out.print(maze1[rowCounter][colCounter]);
						counter++;
						if (counter == rows)
						{
							//Create a new line
							System.out.println("");
							counter = 0;
						}
					}
				}
	}

	//https://en.wikipedia.org/wiki/Maze_solving_algorithm
	
	public static boolean recursiveSolve(int x, int y)
	{
		// If you reached goal do this
	
	    if (maze[x][y] == "G".charAt(0))
	    	{
	    	System.out.println("\nSolved Maze ");
	    	return true;
	    	}

	 // If you are on a wall or already were here
	    if (maze[x][y] == wall1 || wasHere1[x][y]) return false;
	    wasHere1[x][y] = true;

	  
	    	if(((x-2) >= 0) &&((x-1) <= rows))// check if you are going out of bounds	    		
	    		if (recursiveSolve(x-1, y)) { // Recalls method one to the left
	            correctPath1[x][y] = true; // Sets that path value to true and labels it as path
	            maze[x][y] = "+".charAt(0);
	            return true;
	    		}


	    	if( ((x+2) <=rows)) // Checks if going out of bounds	    
	    		if (recursiveSolve(x+1, y)) { // Recalls method one to the right
	    			correctPath1[x][y] = true;
	                maze[x][y] = "+".charAt(0);
	    			return true;
	    		}


	    if(((y-2) >= 0)) // Checks if not on top edge
	        if (recursiveSolve(x, y-1)) { // Recalls method one up
	            correctPath1[x][y] = true;
	            maze[x][y] = "+".charAt(0);
	            return true;
	        }


	    if(((y+2) <= collom)) // Checks if not on bottom edge
	        if (recursiveSolve(x, y+1)) { // Recalls method one down	        	
	            correctPath1[x][y] = true;
	            maze[x][y] = "+".charAt(0);
	            return true;
	        }
	    return false;
	    //There is no solution if return false
	}
}
